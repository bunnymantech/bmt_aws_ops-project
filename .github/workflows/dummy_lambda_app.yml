# ------------------------------------------------------------------------------
# Overview
# ------------------------------------------------------------------------------
# This workflow and the dummy_lambda_app_deploy.yml workflow demonstrate
# how to use GitHub Actions to deploy an AWS app to multi-environments
# on multiple AWS accounts.
#
# This workflow runs unit test and build necessary artifacts for deployment
# For example, in Lambda function project, artifacts are Lambda Source and Lambda Layer
# ------------------------------------------------------------------------------
name: dummy_lambda_app

# ------------------------------------------------------------------------------
# Trigger rules
# ------------------------------------------------------------------------------
# We automatically trigger CI job when there's a push event to the following branches
#
# Reference:
# - Running your workflow only when a push to specific branches occurs: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-your-workflow-only-when-a-push-to-specific-branches-occurs
# ------------------------------------------------------------------------------
on:
  workflow_dispatch:
  push:
    branches:
      - 'dummy_lambda_app/feature**'
      - 'dummy_lambda_app/feature**'
      - 'dummy_lambda_app/fix**'
      - 'dummy_lambda_app/doc**'
      - 'dummy_lambda_app/layer**'
      - 'dummy_lambda_app/lambda**'
      - 'dummy_lambda_app/release**'
      - 'dummy_lambda_app/cleanup**'

# Set common environment for all jobs and all steps
env:
  AWS_REGION: "us-east-1"
  DIR_PROJECT: "projects/dummy_lambda_app-project"

# This is required for configuring aws credentials
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  job_0_build:
    name: 🧪️ 🏗 Unit Test and Build Artifacts
    runs-on: ubuntu-latest
    env:
      USER_ENV_NAME: devops
    steps:
      - name: === 💾 PREPARATION ===
        run: echo "PREPARATION"
      - name: Git Clone the Repository
        uses: actions/checkout@v4
      # ------------------------------------------------------------------------
      # Configure AWS Credentials
      # ------------------------------------------------------------------------
      # configure-aws-credentials is the official GitHub Action to configure
      # AWS Permission. In this project, we use GitHub OIDC to assume a role
      # in AWS account.
      #
      # Reference:
      # - configure-aws-credentials: https://github.com/aws-actions/configure-aws-credentials
      # ------------------------------------------------------------------------
      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          # --------------------------------------------------------------------
          # this role name has to match the ``github_action_open_id_connection.role_name`` field
          # in the ``bootstrap/config.json`` file
          # --------------------------------------------------------------------
          role-to-assume: arn:aws:iam::${{ secrets.DEVOPS_AWS_ACCOUNT_ID }}:role/monorepo-aws-github-oidc
          role-session-name: devops_role_session
          aws-region: ${{ env.AWS_REGION }}
          disable-retry: true
      # ------------------------------------------------------------------------
      # the following two steps install Node.js and AWS CDK in Node.js
      #
      # Reference:
      # - Deploy to AWS with GitHub Actions and AWS CDK: https://dev.to/aws-builders/deploy-to-aws-with-github-actions-and-aws-cdk-4m1e
      # ------------------------------------------------------------------------
      - name: 🛠 Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: 💾 Install CDK in Node
        run: |
          npm install -g aws-cdk@2.111.0
          which cdk
          cdk --version
      # ------------------------------------------------------------------------
      # The following two steps install necessary tools to the global Python.
      # We use pip cache to speed up the installation.
      #
      # Reference:
      # - Caching packages dependencies: https://github.com/actions/setup-python#caching-packages-dependencies
      # ------------------------------------------------------------------------
      - name: 🐍 Setup Python with pip cache
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: ${{ env.DIR_PROJECT }}/requirements-automation.txt
      - name: 💾 Install virtualenv, poetry Dependencies
        run: |
          pip install -r ${{ env.DIR_PROJECT }}/requirements-automation.txt
      # ------------------------------------------------------------------------
      # The following two steps create the virtualenv for the project,
      # and install all project dependencies.
      # We use poetry cache to store the entire virtualenv in the cache.
      #
      # Reference:
      # - Caching packages dependencies: https://github.com/actions/setup-python#caching-packages-dependencies
      # ------------------------------------------------------------------------
      - name: 🐍 Setup Python with poetry cache
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          # ref: https://github.com/actions/setup-python#caching-packages-dependencies
          cache: 'poetry'
          cache-dependency-path: ${{ env.DIR_PROJECT }}/poetry.lock
      - name: 🐍 💾 Create Virtual Environment and Install all dependencies
        working-directory: ${{ env.DIR_PROJECT }}
        run: |
          virtualenv -p python3.9 .venv
          poetry install
      - name: === ✅ START MAIN LOGICS ===
        run: echo "START MAIN LOGICS"
      # ------------------------------------------------------------------------
      # The following steps run unit test and build artifacts
      # ------------------------------------------------------------------------
      # Some unit test requires lambda source artifacts, so we have to build it before unit test
      - name: 🏗️ Build Lambda Source Artifacts
        run: |
          echo done
      # Ideally, we should reach >= 90% code coverage and add additional lint,
      # security scan, sanity check, etc. In this sample project, we only run
      # code coverage test
      - name: 🧪 Run Code Coverage Test
        run: |
          echo done
      - name: 🏗️ Build Lambda Layer
        run: |
          echo done
      - name: 📔 Publish Documentation Website
        run: |
          echo done
      - name: === 🛑 END OF THE JOB ===
        run: echo "END OF THE JOB"
  job_1_deploy_to_sbx:
    name: 🚀 Deploy App to 📦 sbx
    uses: ./.github/workflows/dummy_lambda_app_deploy.yml
    with:
      user_env_name: sbx
    secrets: inherit
    needs: job_0_build

  job_2_deploy_to_tst:
    name: 🚀 Deploy App to 🧪 tst
    # we only run this from release branch
    if: ${{ startsWith(github.ref, 'refs/heads/dummy_lambda_app/release') || startsWith(github.ref, 'refs/heads/dummy_lambda_app/rls') }}
    uses: ./.github/workflows/dummy_lambda_app_deploy.yml
    with:
      user_env_name: tst
    secrets: inherit
    needs: job_1_deploy_to_sbx

  job_3_deploy_to_prd:
    name: 🚀 Deploy App to 🏭 prd
    # we only run this from release branch
    if: ${{ startsWith(github.ref, 'refs/heads/dummy_lambda_app/release') || startsWith(github.ref, 'refs/heads/dummy_lambda_app/rls') }}
    uses: ./.github/workflows/dummy_lambda_app_deploy.yml
    with:
      user_env_name: prd
    secrets: inherit
    needs: job_2_deploy_to_tst
