# ------------------------------------------------------------------------------
# Overview
# ------------------------------------------------------------------------------
# This workflow and the dummy_lambda_app.yml workflow demonstrate
# how to use GitHub Actions to deploy an AWS app to multi-environments
# on multiple AWS accounts.
#
# This workflow will be called by the dummy_lambda_app.yml workflow,
# it deploys the app to one environment and run integration test.
# If the environment is a production environment, it requires manual approval
# in GitHub Actions UI. In production, it also publishes a new immutable
# Lambda function versions, create a snapshot of the configuration data,
# and create a new immutable Git tag.
# ------------------------------------------------------------------------------
name: dummy_lambda_app_deploy

# ------------------------------------------------------------------------------
# This workflow will be called by other workflow to deploy the app to certain environment
#
# Reference:
#
# - Creating a reusable workflow: https://docs.github.com/en/actions/using-workflows/reusing-workflows#creating-a-reusable-workflow
# - on: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on
# ------------------------------------------------------------------------------
on:
  workflow_call:
    inputs:
      user_env_name:
        type: string
        description: 'The user defined environment name'
        required: true

# Set common environment for all jobs and all steps
env:
  AWS_REGION: "us-east-1"
  DIR_PROJECT: "projects/dummy_lambda_app-project"

# This is required for configuring aws credentials
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  deploy:
    name: üöÄ Deploy to ${{ inputs.user_env_name }}
    runs-on: ubuntu-latest
    # --------------------------------------------------------------------------
    # The ``environment:`` keyword creates a new environment, if it is prd,
    # it requires manual approval in GitHub Actions UI.
    #
    # Reference:
    # - Reviewing deployments: https://docs.github.com/en/actions/managing-workflow-runs/reviewing-deployments
    # - Creating an environment: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#creating-an-environment
    # - Using an environment: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#using-an-environment
    # --------------------------------------------------------------------------
    environment:
      name: ${{ inputs.user_env_name }}
    env:
      # Set the environment name to the environment variable
      USER_ENV_NAME: ${{ inputs.user_env_name }}
    steps:
      - name: === üíæ PREPARATION ===
        run: echo "PREPARATION"
      - name: Git Clone the Repository
        uses: actions/checkout@v4
      # ------------------------------------------------------------------------
      # Configure AWS Credentials
      # ------------------------------------------------------------------------
      # configure-aws-credentials is the official GitHub Action to configure
      # AWS Permission. In this project, we use GitHub OIDC to assume a role
      # in AWS account.
      #
      # Reference:
      # - configure-aws-credentials: https://github.com/aws-actions/configure-aws-credentials
      # ------------------------------------------------------------------------
      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          # --------------------------------------------------------------------
          # this role name has to match the ``github_action_open_id_connection.role_name`` field
          # in the ``bootstrap/config.json`` file
          # --------------------------------------------------------------------
          role-to-assume: arn:aws:iam::${{ secrets.DEVOPS_AWS_ACCOUNT_ID }}:role/monorepo-aws-github-oidc
          role-session-name: devops_role_session
          aws-region: ${{ env.AWS_REGION }}
          disable-retry: true
      # ------------------------------------------------------------------------
      # the following two steps install Node.js and AWS CDK in Node.js
      #
      # Reference:
      # - Deploy to AWS with GitHub Actions and AWS CDK: https://dev.to/aws-builders/deploy-to-aws-with-github-actions-and-aws-cdk-4m1e
      # ------------------------------------------------------------------------
      - name: üõ† Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: üíæ Install CDK in Node
        run: |
          npm install -g aws-cdk@2.111.0
          which cdk
          cdk --version
      # ------------------------------------------------------------------------
      # The following two steps install necessary tools to the global Python.
      # We use pip cache to speed up the installation.
      #
      # Reference:
      # - Caching packages dependencies: https://github.com/actions/setup-python#caching-packages-dependencies
      # ------------------------------------------------------------------------
      - name: üêç Setup Python with pip cache
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: ${{ env.DIR_PROJECT }}/requirements-automation.txt
      - name: üíæ Install virtualenv, poetry Dependencies
        run: |
          pip install -r ${{ env.DIR_PROJECT }}/requirements-automation.txt
      # ------------------------------------------------------------------------
      # The following two steps create the virtualenv for the project,
      # and install all project dependencies.
      # We use poetry cache to store the entire virtualenv in the cache.
      #
      # Reference:
      # - Caching packages dependencies: https://github.com/actions/setup-python#caching-packages-dependencies
      # ------------------------------------------------------------------------
      - name: üêç Setup Python with poetry cache
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          # ref: https://github.com/actions/setup-python#caching-packages-dependencies
          cache: 'poetry'
          cache-dependency-path: ${{ env.DIR_PROJECT }}/poetry.lock
      - name: üêç üíæ Create Virtual Environment and Install all dependencies
        working-directory: ${{ env.DIR_PROJECT }}
        run: |
          virtualenv -p python3.9 .venv
          poetry install
      - name: === ‚úÖ START MAIN LOGICS ===
        run: echo "START MAIN LOGICS"
      # ------------------------------------------------------------------------
      # The following steps run unit test and build artifacts
      # ------------------------------------------------------------------------
      - name: üöÄ Deploy Lambda App via CDK
        run: |
          echo deploy lambda app to $${ env.USER_ENV_NAME }}
      - name: üß™ Run Integration Test
        run: |
          echo run integration test on $${ env.USER_ENV_NAME }}
      - name: üîØ Create Config Snapshot
        if: ${{ env.USER_ENV_NAME == 'prd' }}
        run: |
          echo create config snapshot on $${ env.USER_ENV_NAME }}
      - name: üè∑Ô∏è Create Git Tag
        if: ${{ env.USER_ENV_NAME == 'prd' }}
        run: |
          echo create git tag on $${ env.USER_ENV_NAME }}
      - name: === üõë END OF THE JOB ===
        run: echo "END OF THE JOB"
